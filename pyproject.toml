[tool.poetry]
name = "tonie-api"
version = "0.1.1"
description = "Python library to access the REST API of the toniecloud. NOT associated with Boxine (tonies.de) in any way."
authors = ["Willi Meierhof <willi@meierhof.dev>"]
license = "MIT"
readme = "README.md"
repository = "https://github.com/Wilhelmsson177/tonie-api"
documentation = "https://tonie-api.readthedocs.io"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Topic :: Software Development :: Libraries",
]
packages = [{ include = "tonie_api", from = "src" }]

[tool.poetry.urls]
"Bug Tracker" = "https://github.com/Wilhelmsson177/tonie-api/issues"
"Changelog" = "https://github.com/Wilhelmsson177/tonie-api/blob/main/CHANGELOG.md"

[tool.poetry.dependencies]
python = "^3.10"
requests-oauthlib = "^1.3.1"
pydantic = "^2.3.0"

[tool.poetry.group.dev.dependencies]
pytest = "^7.0"
pytest-cov = "^4.1"
ruff = ">=0.0.286,<0.1.14"
black = ">=23.7,<25.0"
responses = "^0.23.3"

[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
myst-parser = ">=0.16"
sphinx = ">=4.0"
sphinx-rtd-theme = ">=1.0"

[tool.semantic_release]
branch = "main"
version_toml = ["pyproject.toml:tool.poetry.version"]
version_variable = "src/tonie_api/__init__.py:__version__"
build_command = "pip install poetry && poetry build"

[tool.semantic_release.changelog]
exclude_commit_patterns = ["chore*", "ci*"]

[tool.semantic_release.changelog.environment]
keep_trailing_newline = true

[tool.pytest.ini_options]
addopts = "-v -Wdefault --cov=tonie_api --cov-report=term-missing:skip-covered"
pythonpath = ["src"]

[tool.coverage.run]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "@overload",
    "if TYPE_CHECKING",
    "raise NotImplementedError",
    'if __name__ == "__main__":',
]

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 120
target-version = ['py310']

[tool.ruff]
# Enable the pycodestyle (`E`) and Pyflakes (`F`) rules by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = ["ALL"]
ignore = [
    "ANN101", # self typing not necessary
    "ANN204", # no returntype on special method init necessary
    "ANN401", # dynamic Any is allowed as response since it is what json returns
    "D205",   # blank line after summary not necessary
    "EXE002", # no executable files in repo
]

# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "docs",
]

# Same as Black.
line-length = 120

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Assume Python 3.10
target-version = "py310"

[tool.ruff.per-file-ignores]
"src/tonie_api/api.py" = ["ANN003"]
"src/tonie_api/models.py" = ["D101", "A003", "N815"]
"tests/*.py" = ["D", "A", "ANN", "S", "SLF", "PLR2004"]

[tool.ruff.pydocstyle]
convention = "google"
